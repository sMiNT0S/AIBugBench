name: Docs

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c
        with:
          python-version: '3.13.7'
          check-latest: false
      - name: Install MkDocs and plugins
        run: |
          python -m pip install -U "pip==24.3.1"
          pip install -r docs/requirements.txt
      # Generate Safety badge JSON to be published under /badges/safety.json on Pages
      - name: Generate Safety badge JSON (no jq)
        env:
          SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
          SAFETY_DISABLE_ANALYTICS: "1"
          CI: "true"
        run: |
          set -euo pipefail
          pip install "safety>=3,<4"

          # Prefer scanning a lockfile if available; else scan the dev lock
          ARG=""
          if [ -f requirements.lock ]; then
            ARG="--file=requirements.lock"
          elif [ -f requirements-dev.lock ]; then
            ARG="--file=requirements-dev.lock"
          fi

          # Non-interactive Safety v3 scan; tolerate failures to keep docs publishing
          safety scan --key "${SAFETY_API_KEY:-}" $ARG --json > safety-results.json || true

          # Pure Python count + badge JSON
          python - <<'PY'
          import json, pathlib
          issues = 0
          try:
              with open("safety-results.json","r",encoding="utf-8") as f:
                  data = json.load(f) or {}
                  issues = len(data.get("issues", []))
          except Exception:
              pass
          color = "brightgreen" if issues == 0 else "red"
          msg = "0 vulns" if issues == 0 else f"{issues} vulns"
          pathlib.Path("docs/badges").mkdir(parents=True, exist_ok=True)
          with open("docs/badges/safety.json","w",encoding="utf-8") as f:
              json.dump({"schemaVersion":1,"label":"safety","message":msg,"color":color}, f)
          PY
      - name: Build site
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: mkdocs build --strict
      - name: Upload artifact
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    steps:
      - id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e
