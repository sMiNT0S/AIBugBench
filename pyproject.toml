[project]
name = "aibugbench"
version = "0.9.0-beta"
description = "AI code generation benchmarking tool"
license = { text = "Apache-2.0" }
classifiers = ["License :: OSI Approved :: Apache Software License"]
authors = [{ name = "sMiNT0S" }]
maintainers = [{ name = "AIBugBench Maintainers" }]
readme = "README.md"
requires-python = ">=3.13,<3.15"
dependencies = [
  "PyYAML==6.0.2",
  "requests==2.32.5",
  "pywin32==311; sys_platform == 'win32'"
]

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
  "test_data/",
  "venv/",
  "submissions/user_submissions/",
  "submissions/templates/",
  "prompts/"
]

[tool.ruff.lint]
# Strict set; expect noise, then burn it down with autofix + small PRs.
select = [
  "E",   # pycodestyle errors (correctness)
  "F",   # pyflakes (unused vars, etc.)
  "W",   # pycodestyle warnings (whitespace, etc.)
  "I",   # import sorting (isort)
  "UP",  # pyupgrade (modernize to 3.13 styles where safe)
  "B",   # flake8-bugbear (common footguns)
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "N",   # pep8-naming
  "RUF", # Ruff-specific improvements
  "S"    # security
]
ignore = [
  "S108"  # hardcoded temporary directory
]

[tool.ruff.lint.isort]
known-first-party = ["benchmark", "validation", "run_benchmark"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
plugins = []  # explicit (currently none configured)
exclude = [
  "submissions/reference_implementations/example_model/",
  "submissions/templates/",
  "test_data/",
  "venv/",
  "htmlcov/",
  ".git/"
]
allow_untyped_globals = true
allow_redefinition = false
allow_untyped_defs = true
allow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = false
strict_optional = false
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
disable_error_code = ["var-annotated", "assignment", "operator", "index", "call-overload"]

# Strict-on-core override: enforce stronger typing only for core packages
[[tool.mypy.overrides]]
module = [
  "benchmark",
  "benchmark.*",
  "validation",
  "validation.*",
  "run_benchmark"
]
disallow_untyped_defs = true
no_implicit_optional = true
disallow_any_generics = true

[tool.ruff.lint.per-file-ignores]
# Tests may use asserts, long lines, and a controlled subprocess call pattern.
"tests/**" = ["S101", "E501", "S102", "SIM102", "F841", "S603"]
# Core files with audited exceptions
"benchmark/validators.py" = ["S603", "S506", "UP047"]  # subprocess call + safe YAML loader override + generic modernization ignore
"benchmark/runner.py"     = ["S603", "S404"]       # audited subprocess usage
"test_data/process_records.py" = ["S506", "S404"]  # fixture: yaml.load + subprocess import
"benchmark/typing_helpers.py" = ["UP047"]            # preserve legacy generic style intentionally

[tool.bandit]
# Exclude directories with intentionally hostile test cases and generated content
exclude_dirs = [
  "test_data",
  "submissions/templates",
  "submissions/user_submissions",
  "prompts",
  "venv"
]
