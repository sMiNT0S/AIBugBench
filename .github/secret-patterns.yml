# Custom secret detection patterns for AIBugBench
# Comprehensive patterns for detecting real secrets while filtering test data

patterns:
  # API Keys and Tokens
  - name: "Generic API Key"
    pattern: "(?i)(api[_-]?key|apikey)[\\s]*[=:][\\s]*['\"]?([a-zA-Z0-9]{20,})['\"]?"
    confidence: "high"
    exclude_paths:
      - "test_data/"
      - "submissions/templates/template/"
      - "submissions/example_model/"
    exclude_patterns:
      - "dummy"
      - "test"
      - "example"
      - "placeholder"

  - name: "Bearer Token"
    pattern: "(?i)bearer[\\s]+([a-zA-Z0-9\\-_]{20,})"
    confidence: "high"
    exclude_patterns:
      - "test_token"
      - "dummy_token"
      - "Bearer test_token_12345"

  - name: "JWT Token"
    pattern: "eyJ[a-zA-Z0-9\\-_]+\\.[a-zA-Z0-9\\-_]+\\.[a-zA-Z0-9\\-_]+"
    confidence: "medium"
    exclude_paths:
      - "test_data/"
      - "docs/"

  # Cloud Provider Keys
  - name: "AWS Access Key"
    pattern: "(?i)AKIA[0-9A-Z]{16}"
    confidence: "high"

  - name: "AWS Secret Key"
    pattern: "(?i)(aws[_-]?secret[_-]?access[_-]?key|aws[_-]?secret)[\\s]*[=:][\\s]*['\"]?([a-zA-Z0-9/+=]{40})['\"]?"
    confidence: "high"

  - name: "Google Cloud Service Account"
    pattern: "\"type\":\\s*\"service_account\""
    confidence: "high"
    context_required: true

  - name: "Azure Client Secret"
    pattern: "(?i)(client[_-]?secret|azure[_-]?secret)[\\s]*[=:][\\s]*['\"]?([a-zA-Z0-9\\-_]{32,})['\"]?"
    confidence: "high"

  # Database Credentials
  - name: "Database URL with Credentials"
    pattern: "(?i)(postgres|mysql|mongodb)://[a-zA-Z0-9]+:[a-zA-Z0-9]+@[a-zA-Z0-9.-]+:[0-9]+/[a-zA-Z0-9]+"
    confidence: "high"
    exclude_patterns:
      - "user:password"
      - "test:test"
      - "dummy:dummy"

  - name: "Database Password"
    pattern: "(?i)(db[_-]?password|database[_-]?password)[\\s]*[=:][\\s]*['\"]?([a-zA-Z0-9]{8,})['\"]?"
    confidence: "medium"
    exclude_patterns:
      - "password"
      - "test123"
      - "dummy"

  # OpenAI and AI Service Keys
  - name: "OpenAI API Key"
    pattern: "sk-[a-zA-Z0-9]{48}"
    confidence: "high"
    exclude_patterns:
      - "sk-test-key-dummy-value"
      - "sk-dummy"

  - name: "Anthropic API Key"
    pattern: "sk-ant-[a-zA-Z0-9\\-_]{95}"
    confidence: "high"

  # Generic Secrets
  - name: "Private Key"
    pattern: "-----BEGIN (RSA |DSA |EC )?PRIVATE KEY-----"
    confidence: "high"

  - name: "Certificate"
    pattern: "-----BEGIN CERTIFICATE-----"
    confidence: "medium"

  - name: "Generic Secret"
    # Long regex retained for accuracy; disable length rule locally.
    # yamllint disable rule:line-length
    pattern: >-
      (?i)(secret|password|passwd|pwd)[\s]*[=:][\s]*['"]?([a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\?]{8,})['"]?
    # yamllint enable rule:line-length
    confidence: "low"
    exclude_paths:
      - "test_data/"
      - "docs/"
    exclude_patterns:
      - "password"
      - "secret"
      - "test123"
      - "dummy"
      - "example"
      - "placeholder"

  # Webhook URLs and Endpoints
  - name: "Webhook URL with Token"
    pattern: "https://hooks\\.[a-zA-Z0-9.-]+/[a-zA-Z0-9/]+\\?[a-zA-Z0-9&=]+"
    confidence: "medium"

  - name: "Generic Token"
    pattern: "(?i)token[\\s]*[=:][\\s]*['\"]?([a-zA-Z0-9]{16,})['\"]?"
    confidence: "low"
    exclude_patterns:
      - "token"
      - "test_token"
      - "dummy_token"
      - "your_token_here"

# File extensions to scan
scan_extensions:
  - ".py"
  - ".yml"
  - ".yaml"
  - ".json"
  - ".env"
  - ".sh"
  - ".bash"
  - ".ps1"
  - ".md"
  - ".txt"
  - ".cfg"
  - ".ini"
  - ".toml"

# File extensions to skip
skip_extensions:
  - ".pyc"
  - ".pyo"
  - ".pyd"
  - ".so"
  - ".dylib"
  - ".dll"
  - ".exe"
  - ".bin"
  - ".jpg"
  - ".png"
  - ".gif"
  - ".pdf"

# Directories to always skip
skip_directories:
  - ".git/"
  - "__pycache__/"
  - ".vscode/"
  - ".idea/"
  - "node_modules/"
  - ".pytest_cache/"
  - "build/"
  - "dist/"
  - "*.egg-info/"

# Context rules for better accuracy
context_rules:
  # Look for actual usage patterns vs just variable names
  - name: "Active Secret Usage"
    pattern: "(?i)(headers|auth|authorization)[\\s]*[=:\\[]+.*['\"]?([a-zA-Z0-9]{20,})['\"]?"
    boost_confidence: true

  - name: "Environment Variable Usage"
    pattern: "(?i)os\\.environ\\[\\.get\\(['\"]([A-Z_]+)['\"]"
    reduce_confidence: true  # Environment variable names are less sensitive

  - name: "Configuration File Pattern"
    pattern: "(?i)\\.(env|config|cfg|ini)$"
    boost_confidence: true  # Configuration files more likely to contain real secrets
