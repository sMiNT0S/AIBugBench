[project]
name = "aibugbench"
version = "0.9.0-beta"
description = "AI code generation benchmarking tool"
license = {text = "Apache-2.0"}
authors = [{ name = "sMiNT0S" }]
maintainers = [{ name = "AIBugBench Maintainers" }]
readme = "README.md"
requires-python = ">=3.13,<3.15"
dependencies = [
  "PyYAML==6.0.3",
  "requests==2.32.5",
  "psutil==7.0.0",
  "pywin32==311; sys_platform == 'win32'"
]
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Testing",
]

[project.urls]
Homepage = "https://github.com/sMiNT0S/AIBugBench"
Documentation = "https://smintos.github.io/AIBugBench/"
Issues = "https://github.com/sMiNT0S/AIBugBench/issues"
Source = "https://github.com/sMiNT0S/AIBugBench"

[project.scripts]
run-benchmark = "run_benchmark:main"

[tool.setuptools]
# Explicit module for legacy root CLI shim; packages discovered below.
py-modules = ["run_benchmark"]

[tool.setuptools.packages.find]
where = ["."]
# Include existing core package plus new Phase-0 scaffold package.
include = ["benchmark", "aibugbench", "validation"]

[build-system]
requires = ["setuptools>=69"]
build-backend = "setuptools.build_meta"

[tool.ruff]
line-length = 100
target-version = "py313"
exclude = [
  ".git/",
  "test_data/",
  "venv/",
  "submissions/user_submissions/",
  "submissions/templates/",
  "prompts/"
]

[tool.ruff.lint]
# Strict set;
select = [
  "E",   # pycodestyle errors (correctness)
  "F",   # pyflakes (unused vars, etc.)
  "W",   # pycodestyle warnings (whitespace, etc.)
  "I",   # import sorting (isort)
  "UP",  # pyupgrade (modernize to 3.13 styles where safe)
  "B",   # flake8-bugbear (common footguns)
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "N",   # pep8-naming
  "RUF", # Ruff-specific improvements
  "S"    # security
]
ignore = [
  "S108"  # hardcoded temporary directory
]

[tool.ruff.lint.isort]
known-first-party = ["benchmark", "validation", "aibugbench", "run_benchmark"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
plugins = []  # explicit (currently none configured)
explicit_package_bases = true
exclude = [
  "submissions/reference_implementations/example_model/",
  "submissions/templates/",
  "test_data/",
  "venv/",
  "htmlcov/",
  ".git/"
]
allow_untyped_globals = false
allow_redefinition = false
allow_untyped_defs = true
allow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = false
strict_optional = false
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
disable_error_code = ["var-annotated", "assignment", "operator", "call-overload", "import-untyped"]

# Strict-on-core override: enforce stronger typing only for core packages
[[tool.mypy.overrides]]
module = [
  "benchmark",
  "benchmark.*",
  "validation",
  "validation.*",
  "aibugbench",
  "aibugbench.*",
  "run_benchmark"
]
disallow_untyped_defs = true
no_implicit_optional = true
disallow_any_generics = true

[tool.ruff.lint.per-file-ignores]
# Tests may use asserts, long lines, and a controlled subprocess call pattern.
"tests/**" = ["S101", "E501", "S102", "SIM102", "F841", "S603"]
# Core files with audited exceptions
"benchmark/validators.py" = ["S603", "S506", "UP047"]  # subprocess call + safe YAML loader override + generic modernization ignore
"benchmark/runner.py"     = ["S603", "S404"]       # audited subprocess usage
"test_data/process_records.py" = ["S506", "S404"]  # fixture: yaml.load + subprocess import
"benchmark/typing_helpers.py" = ["UP047"]            # preserve legacy generic style intentionally


[tool.bandit]
# Exclude directories with intentionally hostile test cases and generated content
exclude_dirs = [
  "test_data",
  "submissions/templates",
  "submissions/user_submissions",
  "prompts",
  "venv"
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
norecursedirs = [
  ".git",
  ".venv",
  "venv",
  ".*",
  "build",
  "dist",
  "node_modules",
  "AppData"
]
# Keep explicit plugin load because CI sets PYTEST_DISABLE_PLUGIN_AUTOLOAD=1
addopts = "-q --rootdir=. --confcutdir=. -p no:doctest -p pytest_cov"

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
concurrency = ["multiprocessing", "thread"]
disable_warnings = ["no-data-collected", "already-imported"]
source = [
  "aibugbench",
  "src/aibugbench",
  "benchmark"
]
omit = [
  "tests/*",
  "scripts/*",
  "**/.venv/*",
  "**/venv/*",
  "**/__pypackages__/*",
  "**/site-packages/*",
  "**/node_modules/*",
  "**/.pytest_cache/*",
  "*/__pycache__/*"
]

[tool.coverage.paths]
source = [
  "aibugbench",
  "src/aibugbench",
  "*/site-packages/aibugbench",
  "*\\site-packages\\aibugbench"
]

[tool.coverage.report]
include = ["aibugbench/*"]
fail_under = 45
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "@overload",
  "@abstractmethod",
  "raise NotImplementedError",
  "^\\s*pass\\s*$",
  "^\\s*if __name__ == ['\"]__main__['\"]:\\s*$"
]

[tool.coverage.html]
directory = ".coverage_html"

[tool.coverage.xml]
output = "coverage.xml"
