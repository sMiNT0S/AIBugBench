[project]
name = "aibugbench"
version = "0.8.1-beta"
description = "AI code generation benchmarking tool"
license = { file = "LICENSE" }
classifiers = ["License :: OSI Approved :: MIT License"]
authors = [{ name = "sMiNT0S" }]
maintainers = [{ name = "AIBugBench Maintainers" }]
readme = "README.md"
requires-python = ">=3.10,<=3.13"
dependencies = [
    "PyYAML==6.0.2",
    "requests==2.32.5"
]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    "test_data/",
    "venv/",
    "submissions/user_submissions/",
    "submissions/templates/",
    "prompts/",
]

[tool.ruff.lint]
# Strict set; expect noise, then burn it down with autofix + small PRs.
select = [
    "E",   # pycodestyle errors (correctness)
    "F",   # pyflakes (unused vars, etc.)
    "W",   # pycodestyle warnings (whitespace, etc.)
    "I",   # import sorting (isort)
    "UP",  # pyupgrade (modernize to 3.13 styles where safe)
    "B",   # flake8-bugbear (common footguns)
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "N",   # pep8-naming
    "RUF", # Ruff-specific improvements
    "S",   # security
]
ignore = [
    "S105",  # hardcoded password - false positives in test code
    "S101",  # use of assert detected
    "S108",  # hardcoded temporary directory
    "S603",  # subprocess call: check for execution of untrusted input
    "S506",  # use of yaml.load with unsafe loader - false positive in test code
]

[tool.ruff.lint.isort]
known-first-party = ["aibugbench"]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
# Exclude problematic duplicate modules in template/example_model
exclude = [
    "submissions/example_model/",
    "submissions/templates/",  # template scaffold (excluded from type checking)
    "test_data/",
    "venv/",
    "htmlcov/",
    ".git/"
]
# Very lenient initial setup for legacy codebase
allow_untyped_globals = true
allow_redefinition = false
allow_untyped_defs = true
allow_incomplete_defs = true
check_untyped_defs = true
# Disable strict checks initially
no_implicit_optional = false
strict_optional = false
# Minimal warnings for now
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
show_error_codes = true
# Skip errors that would require major refactoring
disable_error_code = ["var-annotated", "assignment", "operator", "index", "call-overload"]

# Tests can use bare `assert` without tripping bandit S101.
# Benchmark core functionality requires subprocess calls and intentional YAML loader usage.
[tool.ruff.lint.per-file-ignores]
# Tests may include intentionally long lines, simplified constructs, and dynamic patterns that
# aren't relevant to production code quality. We still keep correctness (no F821) while relaxing
# formatting / style noise. Security assert usage already ignored.
"tests/**" = ["S101", "E501", "S102", "SIM102", "F841"]
"benchmark/validators.py" = ["S603", "S506"]  # subprocess calls + UniqueKeyLoader for duplicate detection
"benchmark/runner.py" = ["S603", "S404"]  # audited subprocess usage
"test_data/process_records.py" = ["S506", "S404"]  # deliberate yaml.load + subprocess import for test fixture

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=benchmark",
    "--cov=run_benchmark",
    "--cov=repo_audit",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=62"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "smoke: marks tests as smoke tests (deselect with '-m \"not smoke\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]

[tool.bandit]
# Exclude directories with intentionally hostile test cases and generated content
exclude_dirs = [
    "test_data",
    "submissions/template",
    "submissions/example_model", 
    "prompts",
    "venv"
]

# Coverage configuration (migrated from .coveragerc for consolidation)
[tool.coverage.run]
branch = true
source = ["benchmark", "run_benchmark", "validation"]

[tool.coverage.report]
omit = [
    "tests/*",
    "*/__init__.py"
]



